'use client';

import React, { useState, useEffect } from 'react';
import { collection, getDocs, query, where, orderBy } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface Employee {
  id: string;
  name: string;
  residentNumber?: string;
  email?: string;
  bankName?: string;
  accountNumber?: string;
  employmentType?: string;
}

interface ConfirmedPayroll {
  id: string;
  employeeId: string;
  employeeName: string;
  month: string;
  confirmedAt: Date;
  confirmedBy: string;
  employmentType?: string;
  calculations: Array<{
    branchId: string;
    branchName: string;
    grossPay: number;
    deductions: number;
    netPay: number;
    workHours: number;
  }>;
  // Í≥ÑÏÇ∞Îêú Ï¥ùÌï© (Î™®Îì† ÏßÄÏ†ê Ìï©Í≥Ñ)
  totalGrossPay?: number;
  totalDeductions?: number;
  totalNetPay?: number;
  totalWorkHours?: number;
}

interface WorkTimeComparisonResult {
  id: string;
  employeeId: string;
  employeeName: string;
  branchId: string;
  branchName: string;
  month: string;
  weeklySchedules: Array<{
    weekStart: string;
    weekEnd: string;
    workDays: Array<{
      date: string;
      dayOfWeek: string;
      startTime: string;
      endTime: string;
      breakTime: number;
      workHours: number;
      notes?: string;
    }>;
  }>;
  actualWorkRecords: Array<{
    date: string;
    startTime: string;
    endTime: string;
    breakTime: number;
    workHours: number;
    notes?: string;
  }>;
  comparisonResults: Array<{
    date: string;
    dayOfWeek: string;
    scheduleStartTime: string;
    scheduleEndTime: string;
    scheduleBreakTime: number;
    scheduleWorkHours: number;
    actualStartTime: string;
    actualEndTime: string;
    actualBreakTime: number;
    actualWorkHours: number;
    timeDifference: number;
    status: 'Ï†ïÏÉÅ' | 'ÏßÄÍ∞Å' | 'Ï°∞Í∏∞Ìá¥Í∑º' | 'Ï¥àÍ≥ºÍ∑ºÎ¨¥';
    notes?: string;
  }>;
  totalScheduleHours: number;
  totalActualHours: number;
  totalDifference: number;
  createdAt: Date;
}

const PayrollStatement: React.FC = () => {
  const [selectedMonth, setSelectedMonth] = useState<string>('');
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [confirmedPayrolls, setConfirmedPayrolls] = useState<ConfirmedPayroll[]>([]);
  const [workTimeComparisons, setWorkTimeComparisons] = useState<WorkTimeComparisonResult[]>([]);
  const [selectedEmployee, setSelectedEmployee] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [filterWithWorkHistory, setFilterWithWorkHistory] = useState(false);
  const [filterWithConfirmedPayroll, setFilterWithConfirmedPayroll] = useState(false);
  const [employeeMemos, setEmployeeMemos] = useState<Array<{id: string, employeeId: string, memo: string, createdAt: Date}>>([]);

  // Ïõî Î¨∏ÏûêÏó¥ ÌëúÏ§ÄÌôî: 'YYYY-M' -> 'YYYY-MM'
  const normalizeMonth = (value: string) => {
    if (!value) return value;
    const match = String(value).match(/^(\d{4})-(\d{1,2})$/);
    if (match) {
      const year = match[1];
      const month = match[2].padStart(2, '0');
      return `${year}-${month}`;
    }
    return value;
  };

  // ÌòÑÏû¨ Ïõî ÏÑ§Ï†ï
  useEffect(() => {
    const now = new Date();
    const currentMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
    setSelectedMonth(currentMonth);
  }, []);

  // ÏßÅÏõê Î™©Î°ù Î°úÎìú
  const loadEmployees = async () => {
    try {
      const employeesQuery = query(
        collection(db, 'employees'),
        orderBy('name', 'asc')
      );
      const employeesSnapshot = await getDocs(employeesQuery);
      const employeesData = employeesSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as Employee[];
      setEmployees(employeesData);
    } catch (error) {
      console.error('ÏßÅÏõê Î™©Î°ù Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  // Í∏âÏó¨ ÌôïÏ†ï Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadConfirmedPayrolls = async () => {
    if (!selectedMonth) return;
    
    try {
      setLoading(true);
      console.log('üî• Í∏âÏó¨ ÌôïÏ†ï Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë:', selectedMonth);
      
      // Ïù∏Îç±Ïä§ ÏóÜÏù¥ ÏûëÎèôÌïòÎèÑÎ°ù orderBy Ï†úÍ±∞
      const payrollsQuery = query(
        collection(db, 'confirmedPayrolls'),
        where('month', '==', selectedMonth)
      );
      const payrollsSnapshot = await getDocs(payrollsQuery);
      const payrollsData = payrollsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as ConfirmedPayroll[];
      
      console.log('üî• Í∏âÏó¨ ÌôïÏ†ï Îç∞Ïù¥ÌÑ∞ Î°úÎìú Í≤∞Í≥º:', {
        month: selectedMonth,
        count: payrollsData.length,
        data: payrollsData
      });
      
      // Í∞Å ÏßÅÏõêÏùò Î™®Îì† ÏßÄÏ†ê Îç∞Ïù¥ÌÑ∞Î•º Ìï©ÏÇ∞ÌïòÏó¨ Ï¥ùÌï© Í≥ÑÏÇ∞
      const processedPayrollsData = payrollsData.map(payroll => {
        // calculations Î∞∞Ïó¥Ïù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
        const calculations = payroll.calculations || [];
        
        const totalGrossPay = calculations.reduce((sum, calc) => sum + (calc.grossPay || 0), 0);
        const totalDeductions = calculations.reduce((sum, calc) => sum + (calc.deductions || 0), 0);
        const totalNetPay = calculations.reduce((sum, calc) => sum + (calc.netPay || 0), 0);
        const totalWorkHours = calculations.reduce((sum, calc) => sum + (calc.workHours || 0), 0);
        
        return {
          ...payroll,
          totalGrossPay,
          totalDeductions,
          totalNetPay,
          totalWorkHours
        };
      });
      
      console.log('üî• Ï≤òÎ¶¨Îêú Í∏âÏó¨ Îç∞Ïù¥ÌÑ∞:', processedPayrollsData);
      
      // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥ÎìúÏóêÏÑú Ï†ïÎ†¨
      processedPayrollsData.sort((a, b) => a.employeeName.localeCompare(b.employeeName));
      setConfirmedPayrolls(processedPayrollsData);
    } catch (error) {
      console.error('Í∏âÏó¨ ÌôïÏ†ï Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    } finally {
      setLoading(false);
    }
  };

  // ÏßÅÏõê Î©îÎ™® Î°úÎìú
  const loadEmployeeMemos = async () => {
    try {
      const memosSnapshot = await getDocs(collection(db, 'employeeMemos'));
      const memosData = memosSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate ? doc.data().createdAt.toDate() : new Date()
      })) as Array<{id: string, employeeId: string, memo: string, createdAt: Date}>;
      
      console.log('üî• ÏßÅÏõê Î©îÎ™® Î°úÎìú:', memosData.length, 'Í∞ú');
      setEmployeeMemos(memosData);
    } catch (error) {
      console.error('ÏßÅÏõê Î©îÎ™® Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  // Í∑ºÎ¨¥ÏãúÍ∞Ñ ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadWorkTimeComparisons = async () => {
    if (!selectedMonth) return;
    
    try {
      console.log('üî• Í∑ºÎ¨¥ÏãúÍ∞Ñ ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë:', selectedMonth);
      
      // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏ÏôÄÏÑú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú ÌïÑÌÑ∞ÎßÅ
      const comparisonsSnapshot = await getDocs(collection(db, 'workTimeComparisonResults'));
      console.log('üî• Ï†ÑÏ≤¥ workTimeComparisonResults Î¨∏ÏÑú Ïàò:', comparisonsSnapshot.docs.length);
      
      const allComparisonsData = comparisonsSnapshot.docs.map(doc => {
        const data = doc.data();
        console.log('üî• Î¨∏ÏÑú Îç∞Ïù¥ÌÑ∞:', { id: doc.id, month: data.month, employeeName: data.employeeName });
        return {
          id: doc.id,
          ...data
        };
      }) as WorkTimeComparisonResult[];
      
      // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú ÏõîÎ≥Ñ ÌïÑÌÑ∞ÎßÅ (ÌòïÏãù ÌëúÏ§ÄÌôî)
      const filteredData = allComparisonsData.filter(item => normalizeMonth(item.month) === selectedMonth);
      
      console.log('üî• ÌïÑÌÑ∞ÎßÅÎêú Í∑ºÎ¨¥ÏãúÍ∞Ñ ÎπÑÍµê Îç∞Ïù¥ÌÑ∞:', {
        month: selectedMonth,
        totalCount: allComparisonsData.length,
        filteredCount: filteredData.length,
        filteredData: filteredData
      });
      
      // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥ÎìúÏóêÏÑú Ï†ïÎ†¨
      filteredData.sort((a, b) => a.employeeName.localeCompare(b.employeeName));
      setWorkTimeComparisons(filteredData);
    } catch (error) {
      console.error('Í∑ºÎ¨¥ÏãúÍ∞Ñ ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  useEffect(() => {
    loadEmployees();
    loadEmployeeMemos();
  }, []);

  useEffect(() => {
    if (selectedMonth) {
      loadConfirmedPayrolls();
      loadWorkTimeComparisons();
    }
  }, [selectedMonth]);

  // ÏÑ†ÌÉùÎêú ÏßÅÏõêÏùò Í∏âÏó¨ Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞
  const selectedPayroll = confirmedPayrolls.find(p => p.employeeId === selectedEmployee);
  const selectedEmployeeInfo = employees.find(e => e.id === selectedEmployee);
  const employmentType = (selectedPayroll as any)?.employmentType || (selectedEmployeeInfo as any)?.employmentType || '';
  
  // Í∑ºÎ¨¥ÎÇ¥Ïó≠ Ï∞æÍ∏∞ (employeeId Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ employeeNameÏúºÎ°ú)
  const selectedWorkTimeComparison = workTimeComparisons.find(w => 
    w.employeeId === selectedEmployee || 
    (selectedEmployeeInfo && w.employeeName === selectedEmployeeInfo.name)
  );

  // Í∑ºÎ¨¥ÎÇ¥Ïó≠ Îß§Ïπ≠ ÎîîÎ≤ÑÍπÖ
  if (selectedEmployee && selectedEmployeeInfo) {
    console.log('üîç Í∑ºÎ¨¥ÎÇ¥Ïó≠ Îß§Ïπ≠ ÎîîÎ≤ÑÍπÖ:', {
      selectedEmployee,
      selectedEmployeeName: selectedEmployeeInfo.name,
      workTimeComparisonsCount: workTimeComparisons.length,
      allWorkTimeComparisons: workTimeComparisons.map(w => ({
        id: w.id,
        employeeId: w.employeeId,
        employeeName: w.employeeName,
        month: w.month,
        normalizedMonth: normalizeMonth(w.month)
      })),
      selectedWorkTimeComparison: selectedWorkTimeComparison ? 'FOUND' : 'NOT_FOUND',
      selectedMonth,
      normalizedSelectedMonth: normalizeMonth(selectedMonth)
    });
    
    // ÏÑ†ÌÉùÎêú Í∑ºÎ¨¥ÎÇ¥Ïó≠ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÏÉÅÏÑ∏ Î∂ÑÏÑù
    if (selectedWorkTimeComparison) {
      console.log('üîç selectedWorkTimeComparison ÏÉÅÏÑ∏ Íµ¨Ï°∞:', {
        id: selectedWorkTimeComparison.id,
        employeeId: selectedWorkTimeComparison.employeeId,
        employeeName: selectedWorkTimeComparison.employeeName,
        month: selectedWorkTimeComparison.month,
        branchName: selectedWorkTimeComparison.branchName,
        totalScheduleHours: selectedWorkTimeComparison.totalScheduleHours,
        totalActualHours: selectedWorkTimeComparison.totalActualHours,
        totalDifference: selectedWorkTimeComparison.totalDifference,
        hasComparisonResults: !!selectedWorkTimeComparison.comparisonResults,
        comparisonResultsLength: selectedWorkTimeComparison.comparisonResults?.length || 0,
        allKeys: Object.keys(selectedWorkTimeComparison),
        sampleData: selectedWorkTimeComparison
      });
    }
  }

  // Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞ ÎîîÎ≤ÑÍπÖ
  if (selectedEmployee) {
    console.log('üîç Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞ ÎîîÎ≤ÑÍπÖ:', {
      selectedEmployee,
      confirmedPayrollsCount: confirmedPayrolls.length,
      workTimeComparisonsCount: workTimeComparisons.length,
      selectedPayroll: selectedPayroll ? 'FOUND' : 'NOT_FOUND',
      selectedWorkTimeComparison: selectedWorkTimeComparison ? 'FOUND' : 'NOT_FOUND',
      selectedEmployeeInfo: selectedEmployeeInfo ? 'FOUND' : 'NOT_FOUND',
      workTimeComparisonsData: workTimeComparisons.map(w => ({
        employeeId: w.employeeId,
        employeeName: w.employeeName,
        month: w.month,
        totalScheduleHours: w.totalScheduleHours,
        totalActualHours: w.totalActualHours,
        comparisonResultsCount: w.comparisonResults?.length || 0
      }))
    });
    
    if (selectedWorkTimeComparison) {
      console.log('üîç selectedWorkTimeComparison ÏÉÅÏÑ∏:', {
        id: selectedWorkTimeComparison.id,
        employeeId: selectedWorkTimeComparison.employeeId,
        employeeName: selectedWorkTimeComparison.employeeName,
        branchName: selectedWorkTimeComparison.branchName,
        month: selectedWorkTimeComparison.month,
        totalScheduleHours: selectedWorkTimeComparison.totalScheduleHours,
        totalActualHours: selectedWorkTimeComparison.totalActualHours,
        totalDifference: selectedWorkTimeComparison.totalDifference,
        comparisonResultsLength: selectedWorkTimeComparison.comparisonResults?.length || 0,
        comparisonResults: selectedWorkTimeComparison.comparisonResults?.slice(0, 3) // Ï≤òÏùå 3Í∞úÎßå Î°úÍ∑∏
      });
      
      // comparisonResultsÍ∞Ä ÎπÑÏñ¥ÏûàÎäîÏßÄ ÌôïÏù∏
      if (!selectedWorkTimeComparison.comparisonResults || selectedWorkTimeComparison.comparisonResults.length === 0) {
        console.log('‚ö†Ô∏è comparisonResultsÍ∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§!');
        console.log('Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞:', selectedWorkTimeComparison);
      } else {
        console.log('‚úÖ comparisonResults Îç∞Ïù¥ÌÑ∞ ÏûàÏùå:', selectedWorkTimeComparison.comparisonResults.length, 'Í∞ú');
      }
    }
  }

  // ÌïÑÌÑ∞ÎßÅÎêú ÏßÅÏõê Î™©Î°ù Í≥ÑÏÇ∞
  const filteredEmployees = employees.filter(employee => {
    if (filterWithWorkHistory) {
      const hasWorkHistory = workTimeComparisons.some(comparison => comparison.employeeId === employee.id);
      if (!hasWorkHistory) return false;
    }
    
    if (filterWithConfirmedPayroll) {
      const hasConfirmedPayroll = confirmedPayrolls.some(payroll => payroll.employeeId === employee.id);
      if (!hasConfirmedPayroll) return false;
    }
    
    return true;
  });

  // ÌïÑÌÑ∞ÎßÅÏù¥ Î≥ÄÍ≤ΩÎê† Îïå ÏÑ†ÌÉùÎêú ÏßÅÏõêÏù¥ ÌïÑÌÑ∞ÎßÅÎêú Î™©Î°ùÏóê ÏóÜÏúºÎ©¥ ÏÑ†ÌÉù Ìï¥Ï†ú
  useEffect(() => {
    if (selectedEmployee && !filteredEmployees.some(emp => emp.id === selectedEmployee)) {
      setSelectedEmployee('');
    }
  }, [filteredEmployees, selectedEmployee]);

  // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú Î°úÍ∑∏
  console.log('üîç Í∏âÏó¨Î™ÖÏÑ∏ÏÑú ÎîîÎ≤ÑÍπÖ:', {
    selectedEmployee,
    selectedPayroll,
    selectedEmployeeInfo,
    confirmedPayrolls: confirmedPayrolls.length,
    workTimeComparisons: workTimeComparisons.length,
    employees: employees.length,
    filteredEmployees: filteredEmployees.length,
    filterWithWorkHistory,
    filterWithConfirmedPayroll
  });

  // ÍπÄÏú†Ï†ï Îç∞Ïù¥ÌÑ∞ ÌäπÎ≥Ñ ÎîîÎ≤ÑÍπÖ
  if (selectedEmployee && selectedEmployeeInfo?.name === 'ÍπÄÏú†Ï†ï') {
    console.log('üî• ÍπÄÏú†Ï†ï ÌäπÎ≥Ñ ÎîîÎ≤ÑÍπÖ:', {
      selectedEmployee,
      selectedEmployeeInfo,
      selectedPayroll,
      selectedWorkTimeComparison,
      confirmedPayrollsForKim: confirmedPayrolls.filter(p => p.employeeId === selectedEmployee),
      workTimeComparisonsForKim: workTimeComparisons.filter(w => w.employeeId === selectedEmployee),
      selectedMonth
    });
  }

  // PDF Îã§Ïö¥Î°úÎìú
  const handleDownloadPDF = async () => {
    if (!selectedPayroll || !selectedEmployeeInfo) {
      alert('ÏßÅÏõêÍ≥º Í∏âÏó¨ Îç∞Ïù¥ÌÑ∞Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      console.log('PDF ÏÉùÏÑ± ÏãúÏûë...');
      const element = document.getElementById('payroll-statement-content');
      if (!element) {
        console.error('payroll-statement-content ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        alert('PDF ÏÉùÏÑ± ÎåÄÏÉÅ ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }

      console.log('jsPDF + html2canvas Ïã§Ìñâ Ï§ë...');
      
         // HTMLÏùÑ Ï∫îÎ≤ÑÏä§Î°ú Î≥ÄÌôò
         const canvas = await html2canvas(element, {
           scale: 1,
           useCORS: true,
           allowTaint: true,
           backgroundColor: '#ffffff',
           logging: false,
           ignoreElements: (element) => {
             // Î¨∏Ï†úÍ∞Ä ÎêòÎäî ÏöîÏÜåÎì§ÏùÑ Î¨¥Ïãú
             return element.classList.contains('problematic-element');
           },
           onclone: (clonedDoc) => {
             // Î™®Îì† Ïä§ÌÉÄÏùºÏùÑ Í∞ïÏ†úÎ°ú RGBÎ°ú Î≥ÄÌôò (lab() ÏÉâÏÉÅ Ìï®Ïàò Ï†úÍ±∞)
             const style = clonedDoc.createElement('style');
             style.textContent = `
               *, *::before, *::after {
                 color: #000000 !important;
                 background-color: #ffffff !important;
                 border-color: #d1d5db !important;
                 background-image: none !important;
                 box-shadow: none !important;
               }
               .bg-gray-50, [class*="bg-gray-50"] { background-color: #f9fafb !important; }
               .bg-gray-100, [class*="bg-gray-100"] { background-color: #f3f4f6 !important; }
               .bg-gray-200, [class*="bg-gray-200"] { background-color: #e5e7eb !important; }
               .text-gray-600, [class*="text-gray-600"] { color: #4b5563 !important; }
               .text-gray-700, [class*="text-gray-700"] { color: #374151 !important; }
               .text-gray-800, [class*="text-gray-800"] { color: #1f2937 !important; }
               .text-gray-900, [class*="text-gray-900"] { color: #111827 !important; }
               .text-blue-600, [class*="text-blue-600"] { color: #2563eb !important; }
               .text-red-600, [class*="text-red-600"] { color: #dc2626 !important; }
               .border-gray-200, [class*="border-gray-200"] { border-color: #e5e7eb !important; }
               .border-gray-300, [class*="border-gray-300"] { border-color: #d1d5db !important; }
               .border-gray-400, [class*="border-gray-400"] { border-color: #9ca3af !important; }
               table { border-collapse: collapse !important; }
               td, th { border: 1px solid #d1d5db !important; }
             `;
             clonedDoc.head.insertBefore(style, clonedDoc.head.firstChild);
             
             // Î™®Îì† ÏöîÏÜåÏùò Ïù∏ÎùºÏù∏ Ïä§ÌÉÄÏùºÎèÑ Í∞ïÏ†úÎ°ú RGBÎ°ú Î≥ÄÌôò
             const allElements = clonedDoc.querySelectorAll('*');
             (allElements as NodeListOf<HTMLElement>).forEach(el => {
               if (el.style) {
                 el.style.color = '#000000';
                 el.style.backgroundColor = '#ffffff';
                 el.style.borderColor = '#d1d5db';
               }
             });
           }
         });

      console.log('Canvas ÏÉùÏÑ± ÏôÑÎ£å:', canvas.width, 'x', canvas.height);
      const imgData = canvas.toDataURL('image/png');
      console.log('Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏôÑÎ£å, Í∏∏Ïù¥:', imgData.length);

      // PDF ÏÉùÏÑ±
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      console.log('Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞:', imgWidth, 'x', imgHeight);
      console.log('ÌéòÏù¥ÏßÄ ÎÜíÏù¥:', pageHeight);

      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      console.log('PDF Ï†ÄÏû• Ï§ë...');
      pdf.save(`Í∏âÏó¨Î™ÖÏÑ∏ÏÑú_${selectedEmployeeInfo.name}_${selectedMonth}.pdf`);
      console.log('PDF ÏÉùÏÑ± ÏôÑÎ£å!');
    } catch (err) {
      console.error('PDF ÏÉùÏÑ± Ïã§Ìå® ÏÉÅÏÑ∏:', err);
      const e = err as unknown as { message?: string; stack?: string };
      if (e?.stack) {
        console.error('ÏóêÎü¨ Ïä§ÌÉù:', e.stack);
      }
      alert(`PDF ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${e?.message || String(err)}`);
    }
  };

  // Í≥µÏú† ÎßÅÌÅ¨ ÏÉùÏÑ±
  const handleShareLink = async () => {
    if (!selectedPayroll || !selectedEmployeeInfo) {
      alert('ÏßÅÏõêÍ≥º Í∏âÏó¨ Îç∞Ïù¥ÌÑ∞Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      // Í≥µÏú†Ïö© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      const shareData = {
        employeeName: selectedEmployeeInfo.name,
        month: selectedMonth,
        grossPay: selectedPayroll?.totalGrossPay || 0,
        deductions: selectedPayroll?.totalDeductions || 0,
        netPay: selectedPayroll?.totalNetPay || 0,
        branchName: selectedPayroll?.calculations?.[0]?.branchName || '-',
        confirmedAt: selectedPayroll?.confirmedAt
      };

      // Í≥µÏú† ÎßÅÌÅ¨ ÏÉùÏÑ± (Ïã§Ï†úÎ°úÎäî ÏÑúÎ≤ÑÏóêÏÑú Ï≤òÎ¶¨Ìï¥Ïïº Ìï®)
      const shareUrl = `${window.location.origin}/payroll-share/${btoa(JSON.stringify(shareData))}`;
      
      // ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨
      await navigator.clipboard.writeText(shareUrl);
      alert('Í≥µÏú† ÎßÅÌÅ¨Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('Í≥µÏú† ÎßÅÌÅ¨ ÏÉùÏÑ± Ïã§Ìå®:', error);
      alert('Í≥µÏú† ÎßÅÌÅ¨ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // Ïù¥Î©îÏùº Í≥µÏú† (ÏÑúÎ≤Ñ Î∞úÏÜ°)
  const handleEmailShare = async () => {
    if (!selectedPayroll || !selectedEmployeeInfo) {
      alert('ÏßÅÏõêÍ≥º Í∏âÏó¨ Îç∞Ïù¥ÌÑ∞Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    if (!selectedEmployeeInfo.email) {
      alert('ÏßÅÏõêÏùò Ïù¥Î©îÏùº Ï£ºÏÜåÍ∞Ä Îì±Î°ùÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return;
    }

    const subject = `Í∏âÏó¨Î™ÖÏÑ∏ÏÑú - ${selectedEmployeeInfo.name} (${selectedMonth})`;
    const body = `
ÏïàÎÖïÌïòÏÑ∏Ïöî ${selectedEmployeeInfo.name}Îãò.

${selectedMonth} Í∏âÏó¨Î™ÖÏÑ∏ÏÑúÎ•º Ï†ÑÎã¨ÎìúÎ¶ΩÎãàÎã§.

- ÏßÅÏõêÎ™Ö: ${selectedEmployeeInfo.name}
- ÏßÄÏ†ê: ${selectedPayroll?.calculations?.[0]?.branchName || '-'}
- Í∏∞Î≥∏Í∏â: ${(selectedPayroll?.totalGrossPay || 0).toLocaleString()}Ïõê
- Í≥µÏ†úÏï°: ${(selectedPayroll?.totalDeductions || 0).toLocaleString()}Ïõê
- Ïã§ÏßÄÍ∏âÏï°: ${(selectedPayroll?.totalNetPay || 0).toLocaleString()}Ïõê

ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©ÏùÄ Ï≤®Î∂ÄÎêú PDF ÌååÏùºÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.

Í∞êÏÇ¨Ìï©ÎãàÎã§.
    `;

    try {
      const element = document.getElementById('payroll-statement-content');
      if (!element) {
        alert('PDF ÏÉùÏÑ± ÎåÄÏÉÅ ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }

      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        logging: false,
        onclone: (clonedDoc) => {
          // Î™®Îì† Ïä§ÌÉÄÏùºÏùÑ Í∞ïÏ†úÎ°ú RGBÎ°ú Î≥ÄÌôò (lab() ÏÉâÏÉÅ Ìï®Ïàò Ï†úÍ±∞)
          const style = clonedDoc.createElement('style');
          style.textContent = `
            *, *::before, *::after {
              color: #000000 !important;
              background-color: #ffffff !important;
              border-color: #d1d5db !important;
              background-image: none !important;
              box-shadow: none !important;
            }
            .bg-gray-50, [class*="bg-gray-50"] { background-color: #f9fafb !important; }
            .bg-gray-100, [class*="bg-gray-100"] { background-color: #f3f4f6 !important; }
            .bg-gray-200, [class*="bg-gray-200"] { background-color: #e5e7eb !important; }
            .text-gray-600, [class*="text-gray-600"] { color: #4b5563 !important; }
            .text-gray-700, [class*="text-gray-700"] { color: #374151 !important; }
            .text-gray-800, [class*="text-gray-800"] { color: #1f2937 !important; }
            .text-gray-900, [class*="text-gray-900"] { color: #111827 !important; }
            .text-blue-600, [class*="text-blue-600"] { color: #2563eb !important; }
            .text-red-600, [class*="text-red-600"] { color: #dc2626 !important; }
            .border-gray-200, [class*="border-gray-200"] { border-color: #e5e7eb !important; }
            .border-gray-300, [class*="border-gray-300"] { border-color: #d1d5db !important; }
            .border-gray-400, [class*="border-gray-400"] { border-color: #9ca3af !important; }
            table { border-collapse: collapse !important; }
            td, th { border: 1px solid #d1d5db !important; }
          `;
          clonedDoc.head.insertBefore(style, clonedDoc.head.firstChild);
          
          // Î™®Îì† ÏöîÏÜåÏùò Ïù∏ÎùºÏù∏ Ïä§ÌÉÄÏùºÎèÑ Í∞ïÏ†úÎ°ú RGBÎ°ú Î≥ÄÌôò
          const allElements = clonedDoc.querySelectorAll('*');
          (allElements as NodeListOf<HTMLElement>).forEach(el => {
            if (el.style) {
              el.style.color = '#000000';
              el.style.backgroundColor = '#ffffff';
              el.style.borderColor = '#d1d5db';
            }
          });
        }
      });
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= 295;
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= 295;
      }

      const pdfBlob = pdf.output('blob');
      const form = new FormData();
      form.append('to', selectedEmployeeInfo.email);
      form.append('subject', subject);
      form.append('text', body.trim());
      form.append('html', body.trim().replace(/\n/g, '<br/>'));
      form.append('file', pdfBlob, `Í∏âÏó¨Î™ÖÏÑ∏ÏÑú_${selectedEmployeeInfo.name}_${selectedMonth}.pdf`);

      const res = await fetch('/api/send-email', { method: 'POST', body: form });
      if (!res.ok) {
        const err = await res.json().catch(() => ({}));
        throw new Error(err?.error || 'Î©îÏùº Ï†ÑÏÜ° Ïã§Ìå®');
      }
      alert('Ïù¥Î©îÏùºÏùÑ Ï†ÑÏÜ°ÌñàÏäµÎãàÎã§.');
    } catch (err) {
      console.error('Ïù¥Î©îÏùº Ï†ÑÏÜ° Ïã§Ìå®:', err);
      alert('Ïù¥Î©îÏùº Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÏΩòÏÜîÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
    }
  };

  // Í∑ºÎ¨¥ÎÇ¥Ïó≠ Ï∂úÎ†•
  const handlePrintWorkHistory = () => {
    if (!selectedWorkTimeComparison || !selectedEmployeeInfo) {
      alert('ÏßÅÏõêÍ≥º Í∑ºÎ¨¥ Îç∞Ïù¥ÌÑ∞Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    const printWindow = window.open('', '_blank');
    if (!printWindow) return;

    const workHistoryHTML = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Í∑ºÎ¨¥ÎÇ¥Ïó≠ - ${selectedEmployeeInfo.name}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .title { font-size: 24px; font-weight: bold; margin-bottom: 10px; }
          .subtitle { font-size: 16px; color: #666; }
          .info-table { width: 100%; border-collapse: collapse; margin-bottom: 30px; }
          .info-table th, .info-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          .info-table th { background-color: #f5f5f5; font-weight: bold; }
          .work-table { width: 100%; border-collapse: collapse; margin-bottom: 30px; }
          .work-table th, .work-table td { border: 1px solid #ddd; padding: 8px; text-align: center; }
          .work-table th { background-color: #f5f5f5; font-weight: bold; }
          .status-normal { color: #28a745; }
          .status-late { color: #dc3545; }
          .status-early { color: #ffc107; }
          .status-overtime { color: #17a2b8; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">Í∑ºÎ¨¥ÎÇ¥Ïó≠</div>
          <div class="subtitle">${selectedMonth} Í∑ºÎ¨¥</div>
        </div>

        <table class="info-table">
          <tr>
            <th width="20%">ÏÑ±Î™Ö</th>
            <td width="30%">${selectedEmployeeInfo.name}</td>
            <th width="20%">ÏßÄÏ†ê</th>
            <td width="30%">${selectedWorkTimeComparison?.branchName}</td>
          </tr>
          <tr>
            <th>Ï¥ù Ïä§ÏºÄÏ§Ñ ÏãúÍ∞Ñ</th>
            <td>${selectedWorkTimeComparison?.totalScheduleHours.toFixed(2)}ÏãúÍ∞Ñ</td>
            <th>Ï¥ù Ïã§Ï†ú Í∑ºÎ¨¥ÏãúÍ∞Ñ</th>
            <td>${selectedWorkTimeComparison?.totalActualHours.toFixed(2)}ÏãúÍ∞Ñ</td>
          </tr>
          <tr>
            <th>ÏãúÍ∞Ñ Ï∞®Ïù¥</th>
            <td>${selectedWorkTimeComparison?.totalDifference.toFixed(2)}ÏãúÍ∞Ñ</td>
            <th>Ï∂úÎ†•Ïùº</th>
            <td>${new Date().toLocaleDateString()}</td>
          </tr>
        </table>

        <table class="work-table">
          <thead>
            <tr>
              <th width="12%">ÎÇ†Ïßú</th>
              <th width="8%">ÏöîÏùº</th>
              <th width="15%">Ïä§ÏºÄÏ§Ñ Ï∂úÍ∑º</th>
              <th width="15%">Ïä§ÏºÄÏ§Ñ Ìá¥Í∑º</th>
              <th width="10%">Ïä§ÏºÄÏ§Ñ ÏãúÍ∞Ñ</th>
              <th width="15%">Ïã§Ï†ú Ï∂úÍ∑º</th>
              <th width="15%">Ïã§Ï†ú Ìá¥Í∑º</th>
              <th width="10%">Ïã§Ï†ú ÏãúÍ∞Ñ</th>
            </tr>
          </thead>
          <tbody>
            ${(selectedWorkTimeComparison?.comparisonResults || []).map(result => `
              <tr>
                <td>${result.date}</td>
                <td>${result.dayOfWeek}</td>
                <td>${result.scheduleStartTime}</td>
                <td>${result.scheduleEndTime}</td>
                <td>${result.scheduleWorkHours.toFixed(2)}ÏãúÍ∞Ñ</td>
                <td>${result.actualStartTime}</td>
                <td>${result.actualEndTime}</td>
                <td>${result.actualWorkHours.toFixed(2)}ÏãúÍ∞Ñ</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </body>
      </html>
    `;

    printWindow.document.write(workHistoryHTML);
    printWindow.document.close();
    printWindow.print();
  };

  // Í∑ºÎ¨¥ÎÇ¥Ïó≠ PDF Îã§Ïö¥Î°úÎìú
  const handleDownloadWorkHistoryPDF = async () => {
    if (!selectedWorkTimeComparison || !selectedEmployeeInfo) {
      alert('ÏßÅÏõêÍ≥º Í∑ºÎ¨¥ Îç∞Ïù¥ÌÑ∞Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      const element = document.getElementById('work-history-content');
      if (!element) {
        alert('PDF ÏÉùÏÑ± ÎåÄÏÉÅ ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }

      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        logging: false,
        onclone: (clonedDoc) => {
          // Î™®Îì† Ïä§ÌÉÄÏùºÏùÑ Í∞ïÏ†úÎ°ú RGBÎ°ú Î≥ÄÌôò
          const style = clonedDoc.createElement('style');
          style.textContent = `
            *, *::before, *::after {
              color: #000000 !important;
              background-color: #ffffff !important;
              border-color: #d1d5db !important;
              background-image: none !important;
              box-shadow: none !important;
            }
            .bg-gray-50, [class*="bg-gray-50"] { background-color: #f9fafb !important; }
            .bg-gray-100, [class*="bg-gray-100"] { background-color: #f3f4f6 !important; }
            .bg-gray-200, [class*="bg-gray-200"] { background-color: #e5e7eb !important; }
            .bg-blue-50, [class*="bg-blue-50"] { background-color: #eff6ff !important; }
            .bg-blue-300, [class*="bg-blue-300"] { background-color: #93c5fd !important; }
            .bg-yellow-50, [class*="bg-yellow-50"] { background-color: #fefce8 !important; }
            .bg-yellow-300, [class*="bg-yellow-300"] { background-color: #fde047 !important; }
            .text-gray-600, [class*="text-gray-600"] { color: #4b5563 !important; }
            .text-gray-700, [class*="text-gray-700"] { color: #374151 !important; }
            .text-gray-800, [class*="text-gray-800"] { color: #1f2937 !important; }
            .text-gray-900, [class*="text-gray-900"] { color: #111827 !important; }
            .text-blue-600, [class*="text-blue-600"] { color: #2563eb !important; }
            .border-gray-200, [class*="border-gray-200"] { border-color: #e5e7eb !important; }
            .border-gray-300, [class*="border-gray-300"] { border-color: #d1d5db !important; }
            .border-gray-400, [class*="border-gray-400"] { border-color: #9ca3af !important; }
            .border-blue-300, [class*="border-blue-300"] { border-color: #93c5fd !important; }
            .border-yellow-300, [class*="border-yellow-300"] { border-color: #fde047 !important; }
            table { border-collapse: collapse !important; }
            td, th { border: 1px solid #d1d5db !important; }
          `;
          clonedDoc.head.insertBefore(style, clonedDoc.head.firstChild);
          
          // Î™®Îì† ÏöîÏÜåÏùò Ïù∏ÎùºÏù∏ Ïä§ÌÉÄÏùºÎèÑ Í∞ïÏ†úÎ°ú RGBÎ°ú Î≥ÄÌôò
          const allElements = clonedDoc.querySelectorAll('*');
          (allElements as NodeListOf<HTMLElement>).forEach(el => {
            if (el.style) {
              el.style.color = '#000000';
              el.style.backgroundColor = '#ffffff';
              el.style.borderColor = '#d1d5db';
            }
          });
        }
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= 295;
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= 295;
      }

      pdf.save(`Í∑ºÎ¨¥ÎÇ¥Ïó≠_${selectedEmployeeInfo.name}_${selectedMonth}.pdf`);
    } catch (error: any) {
      console.error('Í∑ºÎ¨¥ÎÇ¥Ïó≠ PDF ÏÉùÏÑ± Ïã§Ìå®:', error);
      alert(`PDF ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${error?.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
    }
  };

  return (
    <div className="space-y-6">
      {/* Ìó§Îçî */}
      <div className="bg-white shadow rounded-lg p-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Í∏âÏó¨Î™ÖÏÑ∏ÏÑú</h1>
            <p className="mt-1 text-sm text-gray-600">ÏßÅÏõêÎ≥Ñ ÏõîÎ≥Ñ Í∏âÏó¨Î™ÖÏÑ∏ÏÑúÏôÄ Í∑ºÎ¨¥ÎÇ¥Ïó≠ÏùÑ Ï∂úÎ†•Ìï©ÎãàÎã§</p>
          </div>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <label className="text-sm font-medium text-gray-700">Ï≤òÎ¶¨Ìï† Ïõî:</label>
              <input
                type="month"
                value={selectedMonth}
                onChange={(e) => setSelectedMonth(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
        </div>
      </div>

      {/* ÏßÅÏõê ÏÑ†ÌÉù Î∞è Ï∂úÎ†• */}
      <div className="bg-white shadow rounded-lg p-6">
        <h2 className="text-lg font-medium text-gray-900 mb-4">ÏßÅÏõê ÏÑ†ÌÉù</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">ÏßÅÏõê ÏÑ†ÌÉù</label>
            <select
              value={selectedEmployee}
              onChange={(e) => setSelectedEmployee(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">ÏßÅÏõêÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
              {filteredEmployees.map(employee => (
                <option key={employee.id} value={employee.id}>
                  {employee.name}
                </option>
              ))}
            </select>
            
            {/* ÌïÑÌÑ∞ÎßÅ ÏòµÏÖò */}
            <div className="mt-3 space-y-2">
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={filterWithWorkHistory}
                  onChange={(e) => setFilterWithWorkHistory(e.target.checked)}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">Í∑ºÎ¨¥ÏãúÍ∞ÑÎπÑÍµê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî ÏßÅÏõêÎßå</span>
              </label>
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={filterWithConfirmedPayroll}
                  onChange={(e) => setFilterWithConfirmedPayroll(e.target.checked)}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">Í∏âÏó¨ÌôïÏ†ï Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî ÏßÅÏõêÎßå</span>
              </label>
            </div>
          </div>

        </div>


        {/* Í∏âÏó¨Î™ÖÏÑ∏ÏÑú ÎØ∏Î¶¨Î≥¥Í∏∞ */}
        {selectedPayroll && selectedEmployeeInfo && (
          <div className="mt-6 bg-white shadow rounded-lg p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-gray-900">Í∏âÏó¨Î™ÖÏÑ∏ÏÑú ÎØ∏Î¶¨Î≥¥Í∏∞</h3>
              <div className="flex space-x-2">
                <button
                  onClick={handleDownloadPDF}
                  className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  üìÑ PDF Îã§Ïö¥Î°úÎìú
                </button>
                <div className="relative">
                  <button
                    onClick={handleEmailShare}
                    disabled={!selectedEmployeeInfo?.email}
                    className={`px-4 py-2 rounded-md text-sm ${
                      selectedEmployeeInfo?.email
                        ? 'bg-blue-500 text-white hover:bg-blue-600'
                        : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    }`}
                  >
                    üìß Ïù¥Î©îÏùº Í≥µÏú†
                  </button>
                  {!selectedEmployeeInfo?.email && (
                    <div className="absolute top-full left-0 mt-1 text-xs text-gray-500 whitespace-nowrap">
                      Ïù¥Î©îÏùºÏ£ºÏÜåÍ∞Ä ÏóÜÏäµÎãàÎã§
                    </div>
                  )}
                </div>
              </div>
            </div>
            <div id="payroll-statement-content" className="border border-gray-300 p-6 bg-white">
              <div className="text-center mb-6">
                <h1 className="text-2xl font-bold text-gray-900 mb-2">Í∏âÏó¨Î™ÖÏÑ∏ÏÑú</h1>
                <p className="text-gray-600">{selectedMonth} Í∏âÏó¨</p>
              </div>

              <table className="w-full border-collapse border border-gray-400 mb-6">
                <tbody>
                  <tr>
                    <td className="border border-gray-400 p-2 bg-gray-100 font-semibold w-1/4">ÏÑ±Î™Ö</td>
                    <td className="border border-gray-400 p-2 w-1/4">{selectedEmployeeInfo.name}</td>
                    <td className="border border-gray-400 p-2 bg-gray-100 font-semibold w-1/4">Ï£ºÎØºÎ≤àÌò∏</td>
                    <td className="border border-gray-400 p-2 w-1/4">{selectedEmployeeInfo.residentNumber || '-'}</td>
                  </tr>
                  <tr>
                    <td className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ï¥ù ÏßÄÍ∏âÏï°</td>
                    <td className="border border-gray-400 p-2">{(selectedPayroll?.totalGrossPay || 0).toLocaleString()}Ïõê</td>
                    <td className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ï¥ù Í≥µÏ†úÏï°</td>
                    <td className="border border-gray-400 p-2 text-red-600">-{(selectedPayroll?.totalDeductions || 0).toLocaleString()}Ïõê</td>
                  </tr>
                  <tr>
                    <td className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ïã§ÏàòÎ†πÏï°</td>
                    <td className="border border-gray-400 p-2 font-bold text-blue-600" colSpan={3}>{(selectedPayroll?.totalNetPay || 0).toLocaleString()}Ïõê</td>
                  </tr>
                </tbody>
              </table>

              {/* ÏßÄÏ†êÎ≥Ñ ÌôïÏ†ï Í≥ÑÏÇ∞ ÎÇ¥Ïó≠ (confirmedPayrolls.calculations Í∑∏ÎåÄÎ°ú Î∑∞) */}
              {Array.isArray(selectedPayroll?.calculations) && selectedPayroll!.calculations.length > 0 && (
                <div className="mb-6">
                  <h4 className="text-md font-semibold text-gray-900 mb-2">ÏßÄÏ†êÎ≥Ñ ÏÉÅÏÑ∏</h4>
                  <table className="w-full border-collapse border border-gray-400">
                    <thead>
                      <tr>
                        <th className="border border-gray-300 p-2 bg-gray-100">ÏßÄÏ†ê</th>
                        <th className="border border-gray-300 p-2 bg-gray-100">Í∑ºÎ¨¥ÏãúÍ∞Ñ</th>
                        <th className="border border-gray-300 p-2 bg-gray-100">ÏàòÏäµÍ∏âÏó¨</th>
                        <th className="border border-gray-300 p-2 bg-gray-100">Ï†ïÍ∑úÍ∏âÏó¨</th>
                        <th className="border border-gray-300 p-2 bg-gray-100">Ï£ºÌú¥ÏàòÎãπ</th>
                        <th className="border border-gray-300 p-2 bg-gray-100">ÏßÄÍ∏âÏï°</th>
                        <th className="border border-gray-300 p-2 bg-gray-100">Í≥µÏ†úÏï°</th>
                        <th className="border border-gray-300 p-2 bg-gray-100">Ïã§ÏßÄÍ∏âÏï°</th>
                      </tr>
                    </thead>
                    <tbody>
                      {selectedPayroll!.calculations.map((calc, idx) => {
                        const branchName = (calc as any).branchName || ((calc as any).branches && (calc as any).branches[0]?.branchName) || '-';
                        const workHours = (calc as any).actualWorkHours ?? (calc as any).totalWorkHours ?? 0;
                        const gross = (calc as any).grossPay ?? 0;
                        const ded = ((calc as any).deductions && (((calc as any).deductions as any).total ?? 0)) || 0;
                        const net = (calc as any).netPay ?? (gross - ded);
                        return (
                          <tr key={idx}>
                            <td className="border border-gray-300 p-2 text-center">{branchName}</td>
                            <td className="border border-gray-300 p-2 text-right">{(workHours as number).toFixed ? (workHours as number).toFixed(2) : workHours}h</td>
                            <td className="border border-gray-300 p-2 text-right">{(calc as any).probationPay ?? 0}Ïõê</td>
                            <td className="border border-gray-300 p-2 text-right">{(calc as any).regularPay ?? 0}Ïõê</td>
                            <td className="border border-gray-300 p-2 text-right">{(calc as any).weeklyHolidayPay ?? 0}Ïõê</td>
                            <td className="border border-gray-300 p-2 text-right">{(gross as number).toLocaleString()}Ïõê</td>
                            <td className="border border-gray-300 p-2 text-right text-red-600">-{(ded as number).toLocaleString()}Ïõê</td>
                            <td className="border border-gray-300 p-2 text-right font-semibold text-blue-600">{(net as number).toLocaleString()}Ïõê</td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              )}

              {/* Í∏∞ÌÉÄÏÇ¨Ìï≠: Ï£ºÌú¥ÏàòÎãπ Í≥ÑÏÇ∞Ïãù, ÏàòÏäµ Í≥ÑÏÇ∞Ïãù */}
              {Array.isArray(selectedPayroll?.calculations) && (
                <div className="mt-4">
                  <h4 className="text-md font-semibold text-gray-900 mb-2">Í∏∞ÌÉÄÏÇ¨Ìï≠</h4>
                  <div className="text-sm text-gray-700 space-y-2">
                    {selectedPayroll.calculations.map((calc, idx) => {
                      const branchName = (((calc as any).branchName) || (((calc as any).branches && (calc as any).branches[0]?.branchName)) || '-');
                      const probationHours = (calc as any).probationHours || 0;
                      const regularHours = (calc as any).regularHours || 0;
                      const probationPay = (calc as any).probationPay || 0;
                      const regularPay = (calc as any).regularPay || 0;
                      const weeklyHolidayPay = (calc as any).weeklyHolidayPay || 0;
                      const weeklyHolidayHours = (calc as any).weeklyHolidayHours || 0;
                      const hourlyWage = (calc as any).hourlyWage || 0;
                      
                      return (
                        <div key={idx} className="border border-gray-200 p-3 bg-gray-50">
                          <div className="font-medium text-gray-900 mb-2">{branchName} Í∏∞Ï§Ä</div>
                          
                          {/* Ï£ºÌú¥ÏàòÎãπ Í≥ÑÏÇ∞Ïãù (Ï£ºÌú¥ÏàòÎãπÏù¥ ÏûàÎäî Í≤ΩÏö∞Îßå) */}
                          {weeklyHolidayPay > 0 && weeklyHolidayHours > 0 && (
                            <div className="mb-2">
                              <div className="font-medium text-gray-800">Ï£ºÌú¥ÏàòÎãπ Í≥ÑÏÇ∞Ïãù:</div>
                              <div className="text-gray-600 ml-2">
                                Ï£ºÌú¥ÏàòÎãπ = ÏãúÍ∏â √ó Ï£ºÌú¥ÏãúÍ∞Ñ √ó 1.5<br/>
                                = {hourlyWage.toLocaleString()}Ïõê √ó {weeklyHolidayHours}h √ó 1.5<br/>
                                = {weeklyHolidayPay.toLocaleString()}Ïõê
                              </div>
                            </div>
                          )}
                          
                          {/* ÏàòÏäµ Í≥ÑÏÇ∞Ïãù (ÏàòÏäµÏù¥ ÏûàÎäî Í≤ΩÏö∞Îßå) */}
                          {probationHours > 0 && (
                            <div className="mb-2">
                              <div className="font-medium text-gray-800">ÏàòÏäµ Í≥ÑÏÇ∞Ïãù:</div>
                              <div className="text-gray-600 ml-2">
                                ÏàòÏäµÍ∏âÏó¨ = ÏãúÍ∏â √ó ÏàòÏäµÏãúÍ∞Ñ<br/>
                                = {hourlyWage.toLocaleString()}Ïõê √ó {probationHours.toFixed(2)}h<br/>
                                = {probationPay.toLocaleString()}Ïõê
                              </div>
                            </div>
                          )}
                          
                          {/* Ï†ïÍ∑ú Í∏âÏó¨ Í≥ÑÏÇ∞Ïãù */}
                          {regularHours > 0 && (
                            <div className="mb-2">
                              <div className="font-medium text-gray-800">Ï†ïÍ∑úÍ∏âÏó¨ Í≥ÑÏÇ∞Ïãù:</div>
                              <div className="text-gray-600 ml-2">
                                Ï†ïÍ∑úÍ∏âÏó¨ = ÏãúÍ∏â √ó Ï†ïÍ∑úÏãúÍ∞Ñ<br/>
                                = {hourlyWage.toLocaleString()}Ïõê √ó {regularHours.toFixed(2)}h<br/>
                                = {regularPay.toLocaleString()}Ïõê
                              </div>
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}

              <table className="w-full border-collapse border border-gray-400 mb-6">
                <thead>
                  <tr>
                    <th className="border border-gray-400 p-2 bg-gray-100 font-semibold w-1/2">Ìï≠Î™©</th>
                    <th className="border border-gray-400 p-2 bg-gray-100 font-semibold w-1/4 text-right">Í∏àÏï°</th>
                    <th className="border border-gray-400 p-2 bg-gray-100 font-semibold w-1/4 text-right">ÎπÑÍ≥†</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td className="border border-gray-400 p-2">Í∏∞Î≥∏Í∏â</td>
                    <td className="border border-gray-400 p-2 text-right">{(selectedPayroll?.totalGrossPay || 0).toLocaleString()}Ïõê</td>
                    <td className="border border-gray-400 p-2 text-right">-</td>
                  </tr>
                  {employmentType === 'Í∑ºÎ°úÏÜåÎìù' && (
                    <>
                      <tr>
                        <td className="border border-gray-400 p-2">Íµ≠ÎØºÏó∞Í∏à</td>
                        <td className="border border-gray-400 p-2 text-right text-red-600">-{Math.round((selectedPayroll?.totalGrossPay || 0) * 0.045).toLocaleString()}Ïõê</td>
                        <td className="border border-gray-400 p-2 text-right">-</td>
                      </tr>
                      <tr>
                        <td className="border border-gray-400 p-2">Í±¥Í∞ïÎ≥¥Ìóò</td>
                        <td className="border border-gray-400 p-2 text-right text-red-600">-{Math.round((selectedPayroll?.totalGrossPay || 0) * 0.03545).toLocaleString()}Ïõê</td>
                        <td className="border border-gray-400 p-2 text-right">-</td>
                      </tr>
                      <tr>
                        <td className="border border-gray-400 p-2">Ïû•Í∏∞ÏöîÏñëÎ≥¥Ìóò</td>
                        <td className="border border-gray-400 p-2 text-right text-red-600">-{Math.round(Math.round((selectedPayroll?.totalGrossPay || 0) * 0.03545) * 0.1295).toLocaleString()}Ïõê</td>
                        <td className="border border-gray-400 p-2 text-right">-</td>
                      </tr>
                      <tr>
                        <td className="border border-gray-400 p-2">Í≥†Ïö©Î≥¥Ìóò</td>
                        <td className="border border-gray-400 p-2 text-right text-red-600">-{Math.round((selectedPayroll?.totalGrossPay || 0) * 0.009).toLocaleString()}Ïõê</td>
                        <td className="border border-gray-400 p-2 text-right">-</td>
                      </tr>
                      <tr>
                        <td className="border border-gray-400 p-2">ÏÜåÎìùÏÑ∏</td>
                        <td className="border border-gray-400 p-2 text-right text-red-600">-{Math.round((selectedPayroll?.totalGrossPay || 0) * 0.03).toLocaleString()}Ïõê</td>
                        <td className="border border-gray-400 p-2 text-right">-</td>
                      </tr>
                      <tr>
                        <td className="border border-gray-400 p-2">ÏßÄÎ∞©ÏÜåÎìùÏÑ∏</td>
                        <td className="border border-gray-400 p-2 text-right text-red-600">-{Math.round((selectedPayroll?.totalGrossPay || 0) * 0.003).toLocaleString()}Ïõê</td>
                        <td className="border border-gray-400 p-2 text-right">-</td>
                      </tr>
                    </>
                  )}
                  {(employmentType === 'ÏÇ¨ÏóÖÏÜåÎìù' || employmentType === 'Ïô∏Íµ≠Ïù∏') && (
                    <tr>
                      <td className="border border-gray-400 p-2">ÏõêÏ≤úÏßïÏàò(ÏÇ¨ÏóÖÏÜåÎìù 3.3%)</td>
                      <td className="border border-gray-400 p-2 text-right text-red-600">-{Math.round((selectedPayroll?.totalGrossPay || 0) * 0.033).toLocaleString()}Ïõê</td>
                      <td className="border border-gray-400 p-2 text-right">-</td>
                    </tr>
                  )}
                  <tr className="bg-gray-50 font-bold">
                    <td className="border border-gray-400 p-2">Ïã§ÏßÄÍ∏âÏï°</td>
                    <td className="border border-gray-400 p-2 text-right text-blue-600">{(selectedPayroll?.totalNetPay || 0).toLocaleString()}Ïõê</td>
                    <td className="border border-gray-400 p-2 text-right">-</td>
                  </tr>
                </tbody>
              </table>

              <div className="mt-8">
                <div className="border border-gray-400 p-4">
                  <div className="text-right">
                    <div className="mb-2">Ï≤≠Îã¥Ïû•Ïñ¥ÎßàÏºì ÎèôÌÉÑÏ†ê</div>
                    <div className="relative">
                      ÎåÄÌëúÏûê: Ïù¥ÏßÑÏòÅ
                      <span className="relative inline-block ml-2">
                        (Ïù∏)
                        {/* ÏÑúÎ™Ö Ïù¥ÎØ∏ÏßÄÎäî ÌïÑÏöîÏãú Ï∂îÍ∞Ä */}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Ï¶ùÎ™Ö Î¨∏Íµ¨ Î∞è Î∞úÍ∏âÏùº */}
              <div className="mt-6 text-center">
                <p className="text-sm text-gray-700 mb-2">
                  ÏúÑ ÎÇ¥Ïó≠Í≥º Í∞ôÏù¥ Í∏âÏó¨Í∞Ä ÏßÄÍ∏âÎêòÏóàÏùåÏùÑ Ï¶ùÎ™ÖÌï©ÎãàÎã§.
                </p>
                <p className="text-sm text-gray-600">
                  Î∞úÍ∏âÏùº: {new Date().toLocaleDateString('ko-KR', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Í∑ºÎ¨¥ÎÇ¥Ïó≠ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
        {selectedWorkTimeComparison && selectedEmployeeInfo && (() => {
          console.log('üîç Í∑ºÎ¨¥ÎÇ¥Ïó≠ ÎØ∏Î¶¨Î≥¥Í∏∞ Î†åÎçîÎßÅ:', {
            hasSelectedWorkTimeComparison: !!selectedWorkTimeComparison,
            hasSelectedEmployeeInfo: !!selectedEmployeeInfo,
            comparisonResultsLength: selectedWorkTimeComparison?.comparisonResults?.length || 0,
            totalScheduleHours: selectedWorkTimeComparison?.totalScheduleHours || 0,
            totalActualHours: selectedWorkTimeComparison?.totalActualHours || 0
          });

          // ÏÑ†ÌÉùÎêú ÏßÅÏõêÏùò Îç∞Ïù¥ÌÑ∞Îßå ÌïÑÌÑ∞ÎßÅ
          const selectedEmployeeComparisons = workTimeComparisons.filter(comparison => comparison.employeeId === selectedEmployee);

          // Ï†ÑÏ≤¥ Ïã§Í∑ºÎ¨¥ Ìï©Í≥Ñ Í≥ÑÏÇ∞ÏùÑ ÏúÑÌï¥ Î™®Îì† ÌñâÏúºÎ°ú Î≥ÄÌôòÌï¥ Ìï©ÏÇ∞
          const toRows = (items: any[]) => items.map((item) => {
            const parseRange = (range: string) => {
              if (!range || typeof range !== 'string' || !range.includes('-')) return { start: '-', end: '-' };
              const [s, e] = range.split('-');
              return { start: s || '-', end: e || '-' };
            };
            const sched = parseRange(item.scheduledTimeRange as any);
            const actual = parseRange(item.actualTimeRange as any);
            const actualHours = (item as any).actualWorkHours ?? (item as any).actualHours ?? 0;
            const scheduleHours = (item as any).scheduledHours ?? 0;
            const breakTime = (item as any).breakTime ?? 0;
            return {
              date: (item as any).date,
              scheduleStartTime: sched.start,
              scheduleEndTime: sched.end,
              scheduleWorkHours: scheduleHours,
              actualStartTime: actual.start,
              actualEndTime: actual.end,
              actualBreakTime: breakTime,
              actualWorkHours: actualHours
            };
          });
          const allRowsForSelected = toRows(selectedEmployeeComparisons as any[]);
          const overallTotalActual = allRowsForSelected.reduce((sum, r) => sum + (Number(r.actualWorkHours) || 0), 0);
          
          // ÏßÄÏ†êÎ≥ÑÎ°ú Í∑∏Î£πÌôî (WorkTimeComparisonResult Î†àÎ≤®ÏóêÏÑú)
          const branchGroups = selectedEmployeeComparisons.reduce((groups: {[key: string]: WorkTimeComparisonResult[]}, comparison) => {
            const branchName = comparison.branchName || 'ÎØ∏ÏßÄÏ†ïÏßÄÏ†ê';
            if (!groups[branchName]) {
              groups[branchName] = [];
            }
            groups[branchName].push(comparison);
            return groups;
          }, {});

          // ÏãúÍ∞ÑÏùÑ HH:MM ÌòïÏãùÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
          const formatTime = (hours: number) => {
            const h = Math.floor(hours);
            const m = Math.round((hours - h) * 60);
            return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
          };

          // ÎÇ†ÏßúÎ•º YY.MM.DD(ÏöîÏùº) ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
          const formatDate = (dateStr: string) => {
            const date = new Date(dateStr);
            const year = date.getFullYear().toString().slice(-2);
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            const dayNames = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];
            const dayOfWeek = dayNames[date.getDay()];
            return `${year}.${month}.${day}(${dayOfWeek})`;
          };

          return (
            <div className="mt-6 bg-white shadow rounded-lg p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-gray-900">Í∑ºÎ¨¥ÎÇ¥Ïó≠ ÎØ∏Î¶¨Î≥¥Í∏∞</h3>
                <button
                  onClick={handleDownloadWorkHistoryPDF}
                  className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  üìã Í∑ºÎ¨¥ÎÇ¥Ïó≠ PDF Îã§Ïö¥Î°úÎìú
                </button>
              </div>
              <div id="work-history-content" className="border border-gray-300 p-6 bg-white">
                <div className="text-center mb-6">
                  <h1 className="text-2xl font-bold text-gray-900 mb-2">Í∑ºÎ¨¥ÎÇ¥Ïó≠</h1>
                  <p className="text-gray-600">{selectedEmployeeInfo.name} - {selectedMonth}</p>
                </div>

                {/* ÏßÅÏõê Ï†ïÎ≥¥ ÌÖåÏù¥Î∏î */}
                <table className="w-full border-collapse border border-gray-400 mb-6">
                  <tbody>
                    <tr>
                      <td className="border border-gray-400 p-2 bg-gray-100 font-semibold w-1/4">ÏßÅÏõêÎ™Ö</td>
                      <td className="border border-gray-400 p-2 w-1/4">{selectedEmployeeInfo.name}</td>
                      <td className="border border-gray-400 p-2 bg-gray-100 font-semibold w-1/4">Ï£ºÎØºÎ≤àÌò∏</td>
                      <td className="border border-gray-400 p-2 w-1/4">{selectedEmployeeInfo.residentNumber || '-'}</td>
                    </tr>
                    <tr>
                      <td className="border border-gray-400 p-2 bg-gray-100 font-semibold">Í∑ºÎ¨¥Í∏∞Í∞Ñ</td>
                      <td className="border border-gray-400 p-2">{selectedMonth}</td>
                      <td className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ï¥ù Ïã§Í∑ºÎ¨¥ÏãúÍ∞Ñ</td>
                      <td className="border border-gray-400 p-2 font-bold text-blue-600">
                        {formatTime(selectedWorkTimeComparison?.totalActualHours || 0)}
                      </td>
                    </tr>
                  </tbody>
                </table>

                {/* ÏßÄÏ†êÎ≥Ñ Í∑ºÎ¨¥ÎÇ¥Ïó≠ */}
                {Object.entries(branchGroups).map(([branchName, comparisons]) => {
                  // Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌëúÏ§ÄÌôî: ÏùºÏûê Îã®ÏúÑ Î†àÏΩîÎìúÎ•º Ìëú Î†åÎçîÎßÅÏö©ÏúºÎ°ú Î≥ÄÌôò
                  const rows = (comparisons || []).map((item) => {
                    const parseRange = (range: any) => {
                      if (!range || typeof range !== 'string' || !range.includes('-')) return { start: '-', end: '-' };
                      const [s, e] = range.split('-');
                      return { start: s || '-', end: e || '-' };
                    };
                    const pos = parseRange((item as any).posTimeRange);
                    const actual = parseRange((item as any).actualTimeRange);
                    const actualHours = (item as any).actualWorkHours ?? 0;
                    const breakTime = (item as any).breakTime ?? 0;
                    return {
                      date: (item as any).date,
                      posStartTime: pos.start,
                      posEndTime: pos.end,
                      actualStartTime: actual.start,
                      actualEndTime: actual.end,
                      actualBreakTime: breakTime,
                      actualWorkHours: actualHours
                    };
                  });
                  
                  // ÎÇ†ÏßúÏàú Ï†ïÎ†¨
                  rows.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
                  
                  const branchTotalHours = rows.reduce((sum, r) => sum + (Number(r.actualWorkHours) || 0), 0);
                  
                  return (
                    <div key={branchName} className="mb-8">
                      {/* ÏßÄÏ†êÎ™Ö */}
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">{branchName}</h3>
                      
                      {/* Í∑ºÎ¨¥ÎÇ¥Ïó≠Ìëú */}
                      <table className="w-full border-collapse border border-gray-400 mb-4">
                        <thead>
                          <tr>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold">ÎÇ†Ïßú</th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold" colSpan={2}>POS</th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold" colSpan={2}>Ïã§Í∑ºÎ¨¥</th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ìú¥Í≤åÏãúÍ∞Ñ</th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold">Í∑ºÎ¨¥ÏãúÍ∞Ñ</th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ìï©Í≥Ñ</th>
                          </tr>
                          <tr>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold"></th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ï∂úÍ∑º</th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ìá¥Í∑º</th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ï∂úÍ∑º</th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold">Ìá¥Í∑º</th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold"></th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold"></th>
                            <th className="border border-gray-400 p-2 bg-gray-100 font-semibold"></th>
                          </tr>
                        </thead>
                        <tbody>
                          {rows.map((result, index) => (
                            <tr key={index}>
                              <td className="border border-gray-400 p-2 text-center">{formatDate(result.date)}</td>
                              <td className="border border-gray-400 p-2 text-center">{result.posStartTime || '-'}</td>
                              <td className="border border-gray-400 p-2 text-center">{result.posEndTime || '-'}</td>
                              <td className="border border-gray-400 p-2 text-center">{result.actualStartTime || '-'}</td>
                              <td className="border border-gray-400 p-2 text-center">{result.actualEndTime || '-'}</td>
                              <td className="border border-gray-400 p-2 text-center">
                                {formatTime(result.actualBreakTime || 0)}
                              </td>
                              <td className="border border-gray-400 p-2 text-center font-semibold">
                                {formatTime(result.actualWorkHours || 0)}
                              </td>
                              <td className="border border-gray-400 p-2 text-center font-bold text-blue-600">
                                {formatTime(result.actualWorkHours || 0)}
                              </td>
                            </tr>
                          ))}
                          {/* ÏßÄÏ†êÎ≥Ñ Ìï©Í≥Ñ */}
                          <tr className="bg-gray-50 font-bold">
                            <td className="border border-gray-400 p-2 text-center" colSpan={7}>Ìï©Í≥Ñ</td>
                            <td className="border border-gray-400 p-2 text-center text-blue-600">
                              {formatTime(branchTotalHours)}
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  );
                })}

                {/* Ï¥ùÌï©Í≥Ñ */}
                <div className="mt-6 p-4 bg-blue-50 border border-blue-300">
                  <div className="text-center">
                    <div className="text-lg font-semibold text-gray-900 mb-2">Ï¥ùÌï©Í≥Ñ</div>
                    <div className="text-2xl font-bold text-blue-600">
                      {formatTime(overallTotalActual || 0)}
                    </div>
                  </div>
                </div>

                {/* Ìï¥Îãπ ÏßÅÏõêÏö© Î©îÎ™® */}
                {(() => {
                  const employeeMemo = employeeMemos.find(memo => memo.employeeId === selectedEmployee);
                  if (employeeMemo) {
                    return (
                      <div className="mt-6 p-4 bg-yellow-50 border border-yellow-300">
                        <h4 className="text-md font-semibold text-gray-900 mb-2">Ìï¥ÎãπÏßÅÏõêÍ≥µÏßÄÏö© Î©îÎ™®</h4>
                        <div className="text-sm text-gray-700 whitespace-pre-wrap">
                          {employeeMemo.memo}
                        </div>
                        <div className="mt-2 text-xs text-gray-500">
                          ÏûëÏÑ±Ïùº: {employeeMemo.createdAt.toLocaleDateString('ko-KR')}
                        </div>
                      </div>
                    );
                  }
                  return null;
                })()}
              </div>
            </div>
          );
        })()}
      </div>

      {/* Î°úÎî© ÏÉÅÌÉú */}
      {loading && (
        <div className="bg-white shadow rounded-lg p-6">
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span className="ml-2 text-gray-600">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default PayrollStatement;
