'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { collection, getDocs, query, where, orderBy } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { User } from 'firebase/auth';
import WorkTimeComparison from './WorkTimeComparison';
import PayrollCalculation from './PayrollCalculation';

interface Employee {
  id: string;
  name: string;
  employmentType: string;
  salaryType: string;
  branches: string[];
  probationStartDate?: Date;
  probationEndDate?: Date;
  resignationDate?: Date;
}

interface Branch {
  id: string;
  name: string;
}

interface PayrollStatus {
  employeeId: string;
  month: string;
  branchId: string;
  status: 'ÎØ∏Ï≤òÎ¶¨' | 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†Ï§ë' | 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†ÏôÑÎ£å' | 'Í∏âÏó¨ÌôïÏ†ïÏôÑÎ£å';
  lastUpdated: Date;
}

interface EmployeePayrollProcessingProps {
  user: User;
  userBranch?: {
    id: string;
    name: string;
  } | null;
  isManager: boolean;
  onMonthChange?: (month: string) => void;
  onEmployeeChange?: (employeeId: string) => void;
}

const EmployeePayrollProcessing: React.FC<EmployeePayrollProcessingProps> = ({ 
  userBranch, 
  isManager,
  onMonthChange,
  onEmployeeChange
}) => {
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [branches, setBranches] = useState<Branch[]>([]);
  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string>('');
  const [selectedMonth, setSelectedMonth] = useState<string>('');
  const [selectedBranchId, setSelectedBranchId] = useState<string>('');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [statusFilter, setStatusFilter] = useState<string>('Ï†ÑÏ≤¥');
  const [payrollStatuses, setPayrollStatuses] = useState<PayrollStatus[]>([]);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState<'work-comparison' | 'payroll-calculation'>('work-comparison');
  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);
  const [leftPanelWidth, setLeftPanelWidth] = useState(25); // Ï¢åÏ∏° Ìå®ÎÑê ÎÑàÎπÑ (%)
  const [isResizing, setIsResizing] = useState(false);
  const [contracts, setContracts] = useState<{
    id: string;
    employeeId: string;
    employeeName: string;
    employmentType: string;
    salaryType: string;
    hourlyWage?: number;
    monthlySalary?: number;
    probationStartDate?: Date;
    probationEndDate?: Date;
    startDate: Date;
    endDate?: Date;
    createdAt: Date;
    updatedAt: Date;
  }[]>([]);

  // Í∑ºÎ°úÍ≥ÑÏïΩ Ï†ïÎ≥¥ Î°úÎìú
  const loadContracts = useCallback(async () => {
    try {
      console.log('Í∑ºÎ°úÍ≥ÑÏïΩ Ï†ïÎ≥¥ Î°úÎìú ÏãúÏûë');
      const contractsSnapshot = await getDocs(collection(db, 'employmentContracts'));
      const contractsData = contractsSnapshot.docs.map(doc => {
        const data = doc.data();
        return {
          id: doc.id,
          employeeId: data.employeeId,
          employeeName: data.employeeName,
          employmentType: data.employmentType,
          salaryType: data.salaryType,
          hourlyWage: data.hourlyWage,
          monthlySalary: data.monthlySalary,
          probationStartDate: data.probationStartDate?.toDate ? data.probationStartDate.toDate() : data.probationStartDate,
          probationEndDate: data.probationEndDate?.toDate ? data.probationEndDate.toDate() : data.probationEndDate,
          startDate: data.startDate?.toDate ? data.startDate.toDate() : data.startDate,
          endDate: data.endDate?.toDate ? data.endDate.toDate() : data.endDate,
          createdAt: data.createdAt?.toDate ? data.createdAt.toDate() : data.createdAt,
          updatedAt: data.updatedAt?.toDate ? data.updatedAt.toDate() : data.updatedAt
        };
      });
      console.log('Í∑ºÎ°úÍ≥ÑÏïΩ Ï†ïÎ≥¥ Î°úÎìú ÏôÑÎ£å:', contractsData.length, 'Í∞ú');
      setContracts(contractsData);
    } catch (error) {
      console.error('Í∑ºÎ°úÍ≥ÑÏïΩ Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®:', error);
    }
  }, []);

  // Í∏âÏó¨ Ï≤òÎ¶¨ ÏÉÅÌÉú Î°úÎìú (Ìï¥ÎãπÏõî, Ìï¥ÎãπÏßÅÏõê Í∏∞Ï§Ä)
  const loadPayrollStatuses = useCallback(async (employeesData: Employee[]) => {
    try {
      const statuses: PayrollStatus[] = [];
      
      for (const employee of employeesData) {
        console.log(`\n=== ${employee.name} (${employee.id}) ÏÉÅÌÉú ÌôïÏù∏ ÏãúÏûë ===`);
        
        // Í∏âÏó¨ÌôïÏ†ï ÏÉÅÌÉú ÌôïÏù∏ (Ìï¥ÎãπÏõî, Ìï¥ÎãπÏßÅÏõê)
        const payrollQuery = query(
          collection(db, 'confirmedPayrolls'),
          where('employeeId', '==', employee.id),
          where('month', '==', selectedMonth)
        );
        const payrollSnapshot = await getDocs(payrollQuery);
        console.log(`${employee.name} Í∏âÏó¨ÌôïÏ†ï ÏÉÅÌÉú:`, payrollSnapshot.docs.length > 0 ? 'ÏûàÏùå' : 'ÏóÜÏùå');
        
        // Ìï¥Îãπ ÏßÅÏõêÏùò Î™®Îì† ÏßÄÏ†êÏùò Í∑ºÎ¨¥ÏãúÍ∞ÑÎπÑÍµê Í≤ÄÌÜ†ÏÉÅÌÉú ÌôïÏù∏
        const allReviewStatusQuery = query(
          collection(db, 'employeeReviewStatus'),
          where('employeeId', '==', employee.id),
          where('month', '==', selectedMonth)
        );
        const allReviewStatusSnapshot = await getDocs(allReviewStatusQuery);
        console.log(`${employee.name} Í≤ÄÌÜ†ÏÉÅÌÉú Í∞úÏàò:`, allReviewStatusSnapshot.docs.length);
        
        let status: 'ÎØ∏Ï≤òÎ¶¨' | 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†Ï§ë' | 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†ÏôÑÎ£å' | 'Í∏âÏó¨ÌôïÏ†ïÏôÑÎ£å' = 'ÎØ∏Ï≤òÎ¶¨';
        
        if (payrollSnapshot.docs.length > 0) {
          // Í∏âÏó¨ÌôïÏ†ïÏôÑÎ£å
          status = 'Í∏âÏó¨ÌôïÏ†ïÏôÑÎ£å';
          console.log(`${employee.name} ÏµúÏ¢Ö ÏÉÅÌÉú: Í∏âÏó¨ÌôïÏ†ïÏôÑÎ£å`);
        } else if (allReviewStatusSnapshot.docs.length > 0) {
          // Í∑ºÎ¨¥ÏãúÍ∞ÑÎπÑÍµê Í≤ÄÌÜ†ÏÉÅÌÉú ÌôïÏù∏
          const reviewStatuses = allReviewStatusSnapshot.docs.map(doc => {
            const data = doc.data();
            console.log(`${employee.name} ÏßÄÏ†ê ${data.branchId} ÏÉÅÌÉú:`, data.status);
            return data.status;
          });
          
          // ÏßÅÏõêÏùò Î™®Îì† ÏßÄÏ†ê ÌôïÏù∏ (Í≤ÄÌÜ†ÏÉÅÌÉúÍ∞Ä ÏóÜÎäî ÏßÄÏ†êÎèÑ Í≥†Î†§)
          const employeeBranches = employee.branches || [];
          console.log(`${employee.name} Ï¥ù ÏßÄÏ†ê Ïàò:`, employeeBranches.length);
          console.log(`${employee.name} Í≤ÄÌÜ†ÏÉÅÌÉúÍ∞Ä ÏûàÎäî ÏßÄÏ†ê Ïàò:`, allReviewStatusSnapshot.docs.length);
          
          // Î™®Îì† ÏßÄÏ†êÏù¥ Í≤ÄÌÜ†ÏôÑÎ£åÏù∏ÏßÄ ÌôïÏù∏ (Í≤ÄÌÜ†ÏÉÅÌÉúÍ∞Ä ÏóÜÎäî ÏßÄÏ†êÏùÄ Í≤ÄÌÜ†Ï†ÑÏúºÎ°ú Í∞ÑÏ£º)
          const allCompleted = employeeBranches.length > 0 && 
            employeeBranches.every(branchId => {
              const branchStatus = allReviewStatusSnapshot.docs.find(doc => doc.data().branchId === branchId);
              return branchStatus && (branchStatus.data().status === 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†ÏôÑÎ£å' || branchStatus.data().status === 'Í∏âÏó¨ÌôïÏ†ïÏôÑÎ£å');
            });
          
          const hasInProgress = allReviewStatusSnapshot.docs.some(doc => doc.data().status === 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†Ï§ë');
          const hasAnyReviewStatus = allReviewStatusSnapshot.docs.length > 0;
          
          console.log(`${employee.name} Î™®Îì† ÏßÄÏ†ê Í≤ÄÌÜ†ÏôÑÎ£å:`, allCompleted);
          console.log(`${employee.name} Í≤ÄÌÜ†Ï§ë ÏßÄÏ†ê ÏûàÏùå:`, hasInProgress);
          console.log(`${employee.name} Í≤ÄÌÜ†ÏÉÅÌÉú ÏûàÎäî ÏßÄÏ†ê ÏûàÏùå:`, hasAnyReviewStatus);
          
          if (allCompleted) {
            status = 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†ÏôÑÎ£å';
          } else if (hasInProgress) {
            status = 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†Ï§ë';
          } else if (hasAnyReviewStatus) {
            // Í≤ÄÌÜ†ÏÉÅÌÉúÎäî ÏûàÏßÄÎßå Î™®Îëê ÏôÑÎ£åÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
            status = 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†Ï§ë';
          } else {
            status = 'ÎØ∏Ï≤òÎ¶¨';
          }
          console.log(`${employee.name} ÏµúÏ¢Ö ÏÉÅÌÉú:`, status);
        } else {
          // Í∑ºÎ¨¥ÏãúÍ∞ÑÎπÑÍµê Í≤ÄÌÜ†ÏÉÅÌÉúÍ∞Ä ÏóÜÏúºÎ©¥ ÎØ∏Ï≤òÎ¶¨
          status = 'ÎØ∏Ï≤òÎ¶¨';
          console.log(`${employee.name} ÏµúÏ¢Ö ÏÉÅÌÉú: ÎØ∏Ï≤òÎ¶¨ (Í≤ÄÌÜ†ÏÉÅÌÉú ÏóÜÏùå)`);
        }
        
        statuses.push({
          employeeId: employee.id,
          month: selectedMonth,
          branchId: selectedBranchId || '',
          status,
          lastUpdated: new Date()
        });
      }
      
      console.log('\n=== ÏµúÏ¢Ö ÏÉÅÌÉú Î™©Î°ù ===');
      statuses.forEach(s => {
        const employee = employeesData.find(e => e.id === s.employeeId);
        console.log(`${employee?.name}: ${s.status}`);
      });
      
      setPayrollStatuses(statuses);
    } catch (error) {
      console.error('Í∏âÏó¨ Ï≤òÎ¶¨ ÏÉÅÌÉú Î°úÎìú Ïã§Ìå®:', error);
    }
  }, [selectedMonth, selectedBranchId]);

  // üî• ÏµúÏ†ÅÌôî: selectedBranchId ÏûêÎèô ÏÑ§Ï†ï Ï†úÍ±∞
  // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ†ÌÉùÌïú ÏßÄÏ†ê ÌïÑÌÑ∞Î•º Ïú†ÏßÄÌïòÍ≥†, ÏßÅÏõê ÏÑ†ÌÉù Ïãú ÏûêÎèôÏúºÎ°ú Î≥ÄÍ≤ΩÌïòÏßÄ ÏïäÏùå
  // useEffect(() => {
  //   if (selectedEmployee && selectedEmployee.branches && selectedEmployee.branches.length > 0 && selectedBranchId === undefined) {
  //     setSelectedBranchId(selectedEmployee.branches[0]);
  //     console.log('EmployeePayrollProcessing - selectedBranchId ÏûêÎèô ÏÑ§Ï†ï:', selectedEmployee.branches[0]);
  //   }
  // }, [selectedEmployee, selectedBranchId]);

  // ÏßÅÏõê Î™©Î°ù Î°úÎìú (ÌòÑÏû¨ Ïû¨ÏßÅÏ§ëÏù∏ Ï†ÑÏßÅÏõê)
  const loadEmployees = useCallback(async () => {
    if (!selectedMonth) return;

    try {
      setLoading(true);
      
      // Í∑ºÎ°úÍ≥ÑÏïΩ Ï†ïÎ≥¥ Î®ºÏ†Ä Î°úÎìú
      await loadContracts();
      
      // ÌòÑÏû¨ Ïû¨ÏßÅÏ§ëÏù∏ Ï†ÑÏßÅÏõê Î°úÎìú (Ìá¥ÏÇ¨ÏùºÏù¥ ÏóÜÍ±∞ÎÇò ÎØ∏ÎûòÏù∏ ÏßÅÏõê)
      const now = new Date();
      const employeesQuery = query(
        collection(db, 'employees'),
        orderBy('name')
      );
      
      const employeesSnapshot = await getDocs(employeesQuery);
      
      const employeesData = employeesSnapshot.docs
        .map(doc => {
          const data = doc.data();
          return {
            id: doc.id,
            name: data.name,
            employmentType: data.type || data.employmentType,
            salaryType: data.salaryType,
            branches: data.branches && data.branches.length > 0 ? data.branches : (data.branchId ? [data.branchId] : []),
            probationStartDate: data.probationStartDate?.toDate ? data.probationStartDate.toDate() : data.probationStartDate,
            probationEndDate: data.probationEndDate?.toDate ? data.probationEndDate.toDate() : data.probationEndDate,
            resignationDate: data.resignationDate?.toDate ? data.resignationDate.toDate() : data.resignationDate
          };
        })
        .filter(employee => {
          // Ïû¨ÏßÅÏ§ëÏù∏ ÏßÅÏõêÎßå ÌïÑÌÑ∞ÎßÅ (Ìá¥ÏÇ¨ÏùºÏù¥ ÏóÜÍ±∞ÎÇò ÎØ∏ÎûòÏù∏ Í≤ΩÏö∞)
          return !employee.resignationDate || employee.resignationDate > now;
        });

      setEmployees(employeesData);
      
      // Í∏âÏó¨ Ï≤òÎ¶¨ ÏÉÅÌÉú Î°úÎìú
      await loadPayrollStatuses(employeesData);
      
    } catch (error) {
      console.error('ÏßÅÏõê Î™©Î°ù Î°úÎìú Ïã§Ìå®:', error);
    } finally {
      setLoading(false);
    }
  }, [selectedMonth, loadContracts, loadPayrollStatuses]);

  // ÏßÄÏ†ê Î™©Î°ù Î°úÎìú
  const loadBranches = useCallback(async () => {
    try {
      const branchesQuery = query(collection(db, 'branches'), orderBy('name'));
      const branchesSnapshot = await getDocs(branchesQuery);
      const branchesData = branchesSnapshot.docs.map(doc => ({
        id: doc.id,
        name: doc.data().name
      }));
      
      setBranches(branchesData);
      
      // Í¥ÄÎ¶¨Ïûê, Îß§ÎãàÏ†Ä Î™®Îëê Ï†ÑÏßÄÏ†ê Í∏∞Î≥∏ ÏÑ†ÌÉù
      // (Îß§ÎãàÏ†ÄÎäî ÌïÑÌÑ∞Í∞Ä Î≥¥Ïù¥ÏßÄ ÏïäÏúºÎØÄÎ°ú Ïã§Ï†úÎ°úÎäî ÏûêÏã†Ïùò ÏßÄÏ†êÎßå Î≥¥ÏûÑ)
      setSelectedBranchId(''); // Ï†ÑÏßÄÏ†ê Í∏∞Î≥∏ ÏÑ†ÌÉù
    } catch (error) {
      console.error('ÏßÄÏ†ê Î™©Î°ù Î°úÎìú Ïã§Ìå®:', error);
    }
  }, [isManager, userBranch]);

  // Ïõî Ï¥àÍ∏∞Ìôî (Îß§Ïõî 5ÏùºÍπåÏßÄÎäî Ï†ÑÎã¨ Í∏âÏó¨)
  useEffect(() => {
    const now = new Date();
    const currentDay = now.getDate();
    
    // Îß§Ïõî 5ÏùºÍπåÏßÄÎäî Ï†ÑÎã¨ Í∏âÏó¨
    let targetMonth: Date;
    if (currentDay <= 5) {
      // Ï†ÑÎã¨Î°ú ÏÑ§Ï†ï
      targetMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    } else {
      // Ïù¥Î≤à Îã¨
      targetMonth = now;
    }
    
    const currentMonth = `${targetMonth.getFullYear()}-${String(targetMonth.getMonth() + 1).padStart(2, '0')}`;
    setSelectedMonth(currentMonth);
  }, []);

  // üî• ÏµúÏ†ÅÌôî: ÏßÄÏ†ê Î™©Î°ùÏùÄ Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ìïú Î≤àÎßå
  useEffect(() => {
    loadBranches();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // üî• ÏµúÏ†ÅÌôî: ÏßÅÏõê Î™©Î°ùÏùÄ ÏõîÏù¥ Î≥ÄÍ≤ΩÎê† ÎïåÎßå Î°úÎìú
  useEffect(() => {
    if (selectedMonth) {
      loadEmployees();
    }
  }, [selectedMonth]); // eslint-disable-line react-hooks/exhaustive-deps

  // ÌïÑÌÑ∞ÎßÅÎêú ÏßÅÏõê Î™©Î°ù
  const filteredEmployees = employees.filter(employee => {
    const matchesSearch = employee.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'Ï†ÑÏ≤¥' || 
      payrollStatuses.find(status => status.employeeId === employee.id)?.status === statusFilter;
    
    // ÏßÄÏ†ê ÌïÑÌÑ∞ÎßÅ
    const matchesBranch = selectedBranchId === '' || 
      (employee.branches && employee.branches.includes(selectedBranchId));
    
    return matchesSearch && matchesStatus && matchesBranch;
  });

  // ÏßÅÏõê ÏÑ†ÌÉù Ìï∏Îì§Îü¨
  const handleEmployeeSelect = (employee: Employee) => {
    setSelectedEmployee(employee);
    setSelectedEmployeeId(employee.id);
    console.log('EmployeePayrollProcessing - ÏßÅÏõê ÏÑ†ÌÉùÎê®:', employee.name, employee.id);
    onEmployeeChange?.(employee.id);
    console.log('EmployeePayrollProcessing - onEmployeeChange Ìò∏Ï∂úÎê®:', employee.id);
    console.log('ÏÑ†ÌÉùÎêú ÏßÅÏõê:', employee);
    console.log('ÏÑ†ÌÉùÎêú ÏßÅÏõêÏùò ÏßÄÏ†ê:', employee.branches);
  };

  // ÏÉÅÌÉúÎ≥Ñ ÏÉâÏÉÅ
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'ÎØ∏Ï≤òÎ¶¨': return 'text-red-600 bg-red-50';
      case 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†Ï§ë': return 'text-yellow-600 bg-yellow-50';
      case 'Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†ÏôÑÎ£å': return 'text-blue-600 bg-blue-50';
      case 'Í∏âÏó¨Í≥ÑÏÇ∞ÏôÑÎ£å': return 'text-purple-600 bg-purple-50';
      case 'Í∏âÏó¨ÌôïÏ†ïÏôÑÎ£å': return 'text-green-600 bg-green-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  return (
    <div className="p-6">
      {/* Ìó§Îçî */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">ÏßÅÏõêÎ≥Ñ Í∏âÏó¨Ï≤òÎ¶¨</h1>
        <p className="text-gray-600 mt-1">ÏßÅÏõêÎ≥ÑÎ°ú Í∑ºÎ¨¥ÏãúÍ∞Ñ ÎπÑÍµê Î∞è Í∏âÏó¨Í≥ÑÏÇ∞ÏùÑ Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨Ìï©ÎãàÎã§</p>
      </div>

      {/* ÏÉÅÎã® Ïª®Ìä∏Î°§ - Ïõî ÏÑ†ÌÉùÎßå */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Ï≤òÎ¶¨Ìï† Ïõî</label>
          <input
            type="month"
            value={selectedMonth}
            onChange={(e) => {
              setSelectedMonth(e.target.value);
              onMonthChange?.(e.target.value);
            }}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>

      <div className="flex gap-2">
        {/* Ï¢åÏ∏°: ÏßÅÏõê Î™©Î°ù */}
        <div style={{ width: `${leftPanelWidth}%` }}>
          <div className="bg-white rounded-lg shadow">
            <div className="p-4 border-b border-gray-200">
              <h3 className="text-sm font-medium text-gray-900">ÏßÅÏõê Î™©Î°ù</h3>
              <p className="text-sm text-gray-500 mt-1">
                Ï¥ù {filteredEmployees.length}Î™Ö
              </p>
            </div>
            
            {/* Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ */}
            <div className="p-4 border-b border-gray-200 space-y-3">
              {/* Í≤ÄÏÉâ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">ÏßÅÏõê Í≤ÄÏÉâ</label>
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="ÏßÅÏõêÎ™ÖÏúºÎ°ú Í≤ÄÏÉâ..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                />
              </div>
              
              {/* ÏßÄÏ†ê ÌïÑÌÑ∞ */}
              {!isManager && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">ÏßÄÏ†ê ÌïÑÌÑ∞</label>
                  <select
                    value={selectedBranchId}
                    onChange={(e) => setSelectedBranchId(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                  >
                    <option value="">Ï†ÑÏßÄÏ†ê</option>
                    {branches.map((branch) => (
                      <option key={branch.id} value={branch.id}>
                        {branch.name}
                      </option>
                    ))}
                  </select>
                </div>
              )}
              
              {/* ÏÉÅÌÉú ÌïÑÌÑ∞ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">ÏÉÅÌÉú ÌïÑÌÑ∞</label>
                      <select
                        value={statusFilter}
                        onChange={(e) => setStatusFilter(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                      >
                        <option value="Ï†ÑÏ≤¥">Ï†ÑÏ≤¥</option>
                        <option value="ÎØ∏Ï≤òÎ¶¨">ÎØ∏Ï≤òÎ¶¨</option>
                        <option value="Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†Ï§ë">Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†Ï§ë</option>
                        <option value="Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†ÏôÑÎ£å">Í∑ºÎ¨¥ÏãúÍ∞ÑÍ≤ÄÌÜ†ÏôÑÎ£å</option>
                        <option value="Í∏âÏó¨Í≥ÑÏÇ∞ÏôÑÎ£å">Í∏âÏó¨Í≥ÑÏÇ∞ÏôÑÎ£å</option>
                        <option value="Í∏âÏó¨ÌôïÏ†ïÏôÑÎ£å">Í∏âÏó¨ÌôïÏ†ïÏôÑÎ£å</option>
                      </select>
              </div>
            </div>
            
            <div>
              {loading ? (
                <div className="p-4 text-center text-gray-500">Î°úÎî© Ï§ë...</div>
              ) : filteredEmployees.length === 0 ? (
                <div className="p-4 text-center text-gray-500">ÏßÅÏõêÏù¥ ÏóÜÏäµÎãàÎã§</div>
              ) : (
                (() => {
                  console.log('ÏßÅÏõê Î™©Î°ù Î†åÎçîÎßÅ:', filteredEmployees.length, 'Î™Ö');
                  return filteredEmployees.map(employee => {
                  const status = payrollStatuses.find(s => s.employeeId === employee.id)?.status || 'ÎØ∏Ï≤òÎ¶¨';
                  const isSelected = selectedEmployeeId === employee.id;
                  
                  return (
                    <div
                      key={employee.id}
                      onClick={() => {
                        console.log('ÏßÅÏõê ÌÅ¥Î¶≠Îê®:', employee.name);
                        handleEmployeeSelect(employee);
                      }}
                      className={`p-2 border-b border-gray-100 cursor-pointer hover:bg-gray-50 ${
                        isSelected ? 'bg-blue-50 border-blue-200' : ''
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium text-gray-900 flex items-center text-sm">
                            {employee.name}
                            {(() => {
                              // ÏßÅÏõêÍ¥ÄÎ¶¨ÏôÄ ÎèôÏùºÌïú Î°úÏßÅ: contracts Î∞∞Ïó¥ÏóêÏÑú Ìï¥Îãπ ÏßÅÏõêÏùò Í≥ÑÏïΩÏÑú ÌôïÏù∏
                              const hasContract = contracts.some(contract => contract.employeeId === employee.id);
                              // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏ Ï†úÍ±∞
                              // if (employee.name === 'ÍπÄÏÉÅÎØ∏') {
                              //   console.log('ÍπÄÏÉÅÎØ∏ Í≥ÑÏïΩÏÑú ÌôïÏù∏:', {
                              //     employeeId: employee.id,
                              //     hasContract,
                              //     contractsCount: contracts.length,
                              //     contracts: contracts.filter(c => c.employeeId === employee.id)
                              //   });
                              // }
                              return !hasContract && (
                                <span className="ml-2 text-red-500 text-sm" title="Í∑ºÎ°úÍ≥ÑÏïΩÏ†ïÎ≥¥ ÏóÜÏùå">‚ö†Ô∏è</span>
                              );
                            })()}
                          </div>
                          <div className="text-xs text-gray-500 mt-1">
                            {(() => {
                              // Í∑ºÎ°úÍ≥ÑÏïΩÏ†ïÎ≥¥Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
                              const hasContract = contracts.some(contract => contract.employeeId === employee.id);
                              if (!hasContract) {
                                return 'Í∑ºÎ°úÍ≥ÑÏïΩÏ†ïÎ≥¥ ÏóÜÏùå';
                              }
                              return employee.employmentType && employee.employmentType !== 'Ï†ïÍ∑úÏßÅ' && employee.employmentType !== 'ÏïÑÎ•¥Î∞îÏù¥Ìä∏' 
                                ? employee.employmentType 
                                : 'Í∑ºÎ°úÏÜåÎìù';
                            })()} | {(() => {
                              const hasContract = contracts.some(contract => contract.employeeId === employee.id);
                              if (!hasContract) {
                                return 'ÎØ∏ÏÑ§Ï†ï';
                              }
                              return employee.salaryType || 'ÏãúÍ∏â';
                            })()}
                          </div>
                        </div>
                        <div className={`px-1.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(status)}`}>
                          {status}
                        </div>
                      </div>
                    </div>
                  );
                });
                })()
              )}
            </div>
          </div>
        </div>

        {/* Î¶¨ÏÇ¨Ïù¥Ï†Ä */}
        <div
          className="w-1 bg-gray-300 hover:bg-blue-500 cursor-col-resize transition-colors"
          onMouseDown={(e) => {
            e.preventDefault();
            setIsResizing(true);
            
            const handleMouseMove = (e: MouseEvent) => {
              const container = (e.target as HTMLElement)?.closest('.flex');
              if (!container) return;
              
              const containerRect = container.getBoundingClientRect();
              const newWidth = ((e.clientX - containerRect.left) / containerRect.width) * 100;
              
              // ÏµúÏÜå 15%, ÏµúÎåÄ 40%Î°ú Ï†úÌïú
              if (newWidth >= 15 && newWidth <= 40) {
                setLeftPanelWidth(newWidth);
              }
            };
            
            const handleMouseUp = () => {
              setIsResizing(false);
              document.removeEventListener('mousemove', handleMouseMove);
              document.removeEventListener('mouseup', handleMouseUp);
            };
            
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
          }}
        />

        {/* Ïö∞Ï∏°: ÌÉ≠ ÏΩòÌÖêÏ∏† */}
        <div style={{ width: `${100 - leftPanelWidth}%` }}>
          {selectedEmployee ? (
            <>
              {/* ÏÑ†ÌÉùÎêú ÏßÅÏõê ÌëúÏãú - Ìù∞ÏÉâ ÏÉÅÏûê Î∞îÍπ• */}
              {selectedEmployeeId && (
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 p-4 rounded-lg shadow-sm mb-6">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="flex-shrink-0">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          <svg className="h-4 w-4 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                          </svg>
                        </div>
                      </div>
                      <div className="ml-3">
                        <p className="text-sm font-medium text-gray-900">
                          ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏßÅÏõê
                        </p>
                        <p className="text-xs text-gray-600">
                          Í∑ºÎ¨¥ÏãúÍ∞ÑÎπÑÍµê Î∞è Í∏âÏó¨Í≥ÑÏÇ∞ ÏûëÏóÖÏóê ÏÇ¨Ïö©Îê©ÎãàÎã§
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                        {selectedEmployee?.name || selectedEmployeeId}
                      </span>
                    </div>
                  </div>
                </div>
              )}

              {/* ÌÉ≠ Î©îÎâ¥Í∞Ä ÏûàÎäî Ìù∞ÏÉâ ÏÉÅÏûê */}
              <div className="bg-white rounded-lg shadow">
                {/* ÌÉ≠ Ìó§Îçî */}
              <div className="border-b border-gray-200">
                <nav className="flex space-x-8 px-6">
                  <button
                    onClick={() => setActiveTab('work-comparison')}
                    className={`py-4 px-1 border-b-2 font-medium text-sm ${
                      activeTab === 'work-comparison'
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    Í∑ºÎ¨¥ÏãúÍ∞ÑÎπÑÍµê
                  </button>
                  <button
                    onClick={() => {
                      console.log('EmployeePayrollProcessing - Í∏âÏó¨Í≥ÑÏÇ∞ÏûëÏóÖ ÌÉ≠ ÌÅ¥Î¶≠Îê®');
                      console.log('EmployeePayrollProcessing - Ïù¥Ï†Ñ activeTab:', activeTab);
                      setActiveTab('payroll-calculation');
                      console.log('EmployeePayrollProcessing - ÏÉàÎ°úÏö¥ activeTab ÏÑ§Ï†ïÎê®: payroll-calculation');
                    }}
                    className={`py-4 px-1 border-b-2 font-medium text-sm ${
                      activeTab === 'payroll-calculation'
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    Í∏âÏó¨Í≥ÑÏÇ∞ÏûëÏóÖ
                  </button>
                </nav>
              </div>

              {/* ÌÉ≠ ÏΩòÌÖêÏ∏† */}
              <div className="p-6">
                {activeTab === 'work-comparison' && (
                  <WorkTimeComparison 
                    userBranch={selectedBranchId ? branches.find(b => b.id === selectedBranchId) : undefined}
                    isManager={isManager}
                    selectedEmployeeId={selectedEmployeeId}
                    selectedMonth={selectedMonth}
                    selectedBranchId={selectedBranchId}
                    hideEmployeeSelection={true}
                    hideBranchSelection={true}
                    selectedEmployeeBranches={selectedEmployee?.branches || []}
                  />
                )}

                {activeTab === 'payroll-calculation' && (
                  <>
                    {console.log('EmployeePayrollProcessing - PayrollCalculation Î†åÎçîÎßÅ Ï°∞Í±¥:', { activeTab, selectedEmployeeId, selectedMonth })}
                    <PayrollCalculation
                      userBranch={selectedBranchId}
                      isManager={isManager}
                      selectedEmployeeId={selectedEmployeeId}
                      selectedMonth={selectedMonth}
                      onPayrollStatusChange={() => {
                        // Í∏âÏó¨ÌôïÏ†ï ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïãú ÏßÅÏõê Î™©Î°ùÍ≥º ÏÉÅÌÉú Îã§Ïãú Î°úÎìú
                        loadEmployees();
                      }}
                    />
                  </>
                )}
              </div>
              </div>
            </>
          ) : (
            <div className="space-y-4">
              {/* ÏÑ†ÌÉùÎêú ÏßÅÏõê ÌëúÏãú */}
              {selectedEmployeeId && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="flex-shrink-0">
                        <svg className="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                        </svg>
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-blue-700">
                          <span className="font-medium">ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏßÅÏõê:</span> 
                          <span className="ml-2 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-semibold">
                            {selectedEmployeeId}
                          </span>
                        </p>
                      </div>
                    </div>
                    <div className="text-xs text-blue-600">
                      Í∑ºÎ¨¥ÏãúÍ∞ÑÎπÑÍµê ‚Ä¢ Í∏âÏó¨Í≥ÑÏÇ∞ÏûëÏóÖÏóêÏÑú ÏÇ¨Ïö©Îê©ÎãàÎã§
                    </div>
                  </div>
                </div>
              )}
              
              <div className="bg-white rounded-lg shadow p-8 text-center">
                <div className="text-gray-400 text-lg mb-2">üë•</div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">ÏßÅÏõêÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</h3>
                <p className="text-gray-600">Ï¢åÏ∏°ÏóêÏÑú ÏßÅÏõêÏùÑ ÏÑ†ÌÉùÌïòÎ©¥ Í∑ºÎ¨¥ÏãúÍ∞ÑÎπÑÍµê Î∞è Í∏âÏó¨Í≥ÑÏÇ∞ ÏûëÏóÖÏùÑ ÏßÑÌñâÌï† Ïàò ÏûàÏäµÎãàÎã§.</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default EmployeePayrollProcessing;
